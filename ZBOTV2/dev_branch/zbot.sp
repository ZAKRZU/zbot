/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <cstrike>
#include <sdktools>

#define COUNTDOWN_TIMER 10

#define MATCH_STATUS_NONE 0
#define MATCH_STATUS_WARMUP 1
#define MATCH_STATUS_KNIFE 2
#define MATCH_STATUS_AFTER_KNIFE 3
#define MATCH_STATUS_MATCH1 4
#define MATCH_STATUS_MATCH2 5
#define MATCH_STATUS_END 6

char prefix[] = "\x01 \x06[\x0BZBOT\x06]\x01 ";
int g_match_status = MATCH_STATUS_NONE;
static float g_server_tickrate = 0.0;
bool g_ctUnpaused = false;
bool g_tUnpaused = false;
bool g_ctReady = false;
bool g_tReady = false;
bool g_nextRound = false;
bool g_demoRecording = false;
int g_knifeWinner = 0;
int g_overtimeCount = 0;

ConVar g_cvClinch
ConVar g_cvDemo;
ConVar g_cvKnifeRound;
ConVar g_cvPass;
ConVar g_cvConfig;
ConVar g_cvTeam1;
ConVar g_cvTeam2;

public Plugin:myinfo = 
{
	name = "ZBOT_Official",
	author = "ZAKRZU",
	description = "<- Description ->",
	version = "0.49.1",
	url = "<- URL ->"
}

public OnPluginStart()
{
	g_cvClinch = FindConVar("mp_match_can_clinch");
	g_cvDemo = CreateConVar("zbot_demo", "1", "", FCVAR_PROTECTED, true, 0.0, true, 1.0);
	g_cvKnifeRound = CreateConVar("zbot_knife", "1", "", FCVAR_PROTECTED, true, 0.0, true, 1.0);
	g_cvPass = CreateConVar("zbot_pass", "pcw", "", FCVAR_PROTECTED);
	g_cvConfig =  CreateConVar("zbot_config", "esl5on5.cfg", "", FCVAR_PROTECTED);
	g_cvTeam1 = CreateConVar("zbot_team1", "Team1", "", FCVAR_PROTECTED);
	g_cvTeam2 = CreateConVar("zbot_team2", "Team2", "", FCVAR_PROTECTED);
	AutoExecConfig(true, "config", "zbot_config");
	
	HookEvent("round_end", Event_RoundEnd);
	HookEvent("round_prestart", Event_RoundPreStart);
	HookEvent("cs_match_end_restart", Event_MatchEndRestart);
	HookEvent("round_poststart", Event_RoundPostStart);
	HookEvent("cs_win_panel_match", Event_MatchEnd);
	
	RegConsoleCmd("zbot", Command_Create);
	g_server_tickrate = 1.0/GetTickInterval();
}

public Action Event_MatchEnd(Event event, const char[] name, bool dontBroadcast)
{
	if(g_match_status == MATCH_STATUS_NONE)
		return;
	int CT = GetTeamScore(CS_TEAM_CT);
	int T = GetTeamScore(CS_TEAM_T);
	if(CT == T)
	{
		PrintToChatAll("%sMATCH DRAW WITH SCORE \x0CCT\x01: %d | \x09T\x01: %d", prefix, CT, T);
	}
	else 
	{
		PrintToChatAll("%sMATCH ENDED WITH SCORE \x0CCT\x01: %d | \x09T\x01: %d", prefix, CT, T);
	}
	g_match_status = MATCH_STATUS_END;
}

public Action Event_RoundPostStart(Event event, const char[] name, bool dontBroadcast)
{
	if(g_match_status == MATCH_STATUS_NONE)
		return;
	if(g_match_status == MATCH_STATUS_MATCH1 || g_match_status == MATCH_STATUS_MATCH2)
	{
		int CT = GetTeamScore(CS_TEAM_CT);
		int T = GetTeamScore(CS_TEAM_T);
		
		PrintToChatAll("%s\x0CCT\x01: %d | \x09T\x01: %d", prefix, CT, T);
	}
}

public Action Event_MatchEndRestart(Event event, const char[] name, bool dontBroadcast)
{
	if(g_match_status == MATCH_STATUS_NONE)
		return;
	StopDemo();
	g_match_status = MATCH_STATUS_NONE;
	char mapname[255];
	GetCurrentMap(mapname, sizeof(mapname));
	ServerCommand("changelevel %s", mapname);
}

public Action Event_RoundPreStart(Event event, const char[] name, bool dontBroadcast)
{
	if(g_match_status == MATCH_STATUS_NONE)
		return;
	if(g_nextRound)
	{
		if(g_match_status == MATCH_STATUS_AFTER_KNIFE)
		{
			ServerCommand("mp_warmup_start");
		} 
		else if(g_match_status == MATCH_STATUS_MATCH1)
		{
			PrintToChatAll("%s\x04MATCH IS LIVE!!", prefix);
			PrintToChatAll("%s\x04MATCH IS LIVE!!", prefix);
			PrintToChatAll("%s\x04MATCH IS LIVE!!", prefix);
			PrintToChatAll("%s\x04MATCH IS LIVE!!", prefix);
		}
		g_nextRound = false;
	} 
}

public Action Event_RoundEnd(Event event, const char[] name, bool dontBroadcast)
{
	int winner = event.GetInt("winner");
	//int reason = event.GetInt("reason");
	char message[256];
	event.GetString("message", message, sizeof(message));
	if(g_match_status == MATCH_STATUS_KNIFE)
	{
		g_knifeWinner = winner;
		g_match_status = MATCH_STATUS_AFTER_KNIFE;
		ConVar cvHalf = FindConVar("mp_halftime_duration");
		cvHalf.SetInt(15);
		
		ConVar cvRoundT = FindConVar("mp_roundtime");
		cvRoundT.SetInt(5);
		
		ConVar cvRoundTD = FindConVar("mp_roundtime_defuse");
		cvRoundTD.SetInt(0);
		
		ConVar cvRoundTH = FindConVar("mp_roundtime_hostage");
		cvRoundTH.SetInt(0);
		
		ConVar cvCTDS = FindConVar("mp_ct_default_secondary");
		cvCTDS.SetString("weapon_hkp2000");
		
		ConVar cvTDS = FindConVar("mp_t_default_secondary");
		cvTDS.SetString("weapon_glock");
		
		ConVar cvArmor = FindConVar("mp_free_armor");
		cvArmor.SetInt(0);
		
		ConVar cvC4 = FindConVar("mp_give_player_c4");
		cvC4.SetInt(1);
		
		ConVar cvMaxMoney = FindConVar("mp_maxmoney");
		cvMaxMoney.SetInt(16000);
		
		ConVar cvFreez = FindConVar("mp_freezetime");
		cvFreez.SetInt(0);
		
		ConVar cvFriendly = FindConVar("mp_friendlyfire");
		cvFriendly.SetInt(0);
		g_nextRound = true;
		if(winner == CS_TEAM_T)
			PrintToChatAll("%sT won the knife round!", prefix);
		else if(winner == CS_TEAM_CT)
			PrintToChatAll("%sCT won the knife round!", prefix);
	}
	if(g_match_status == MATCH_STATUS_MATCH1)
	{
		int CT = GetTeamScore(CS_TEAM_CT);
		int T = GetTeamScore(CS_TEAM_T);
		int playedrounds = T + CT;
		ConVar cvar = FindConVar("mp_maxrounds");
		int allrounds = cvar.IntValue;
		if(playedrounds < allrounds)
			return;
		if(CT > T || T > CT)
			return;
		cvar = FindConVar("mp_overtime_enable");
		int overtime = cvar.IntValue;
		cvar = FindConVar("mp_overtime_maxrounds");
		int maxrounds = cvar.IntValue;
		if(g_overtimeCount > 0)
		{
			allrounds += (g_overtimeCount * maxrounds);
		}
		if(playedrounds == allrounds && overtime == 1)
		{
			g_overtimeCount++;
			PrintToChatAll("%sOVERTIME %d!!", prefix, g_overtimeCount);
			if(g_overtimeCount == 1)
			{
				ServerCommand("mp_pause_match");
				PrintToChatAll("%sOVERTIME STARTED! Match has been paused!", prefix);
			}

		}
	}
}

public OnMapStart()
{
	g_ctUnpaused = false;
	g_tUnpaused = false;
	g_ctReady = false;
	g_tReady = false;
	g_nextRound = false;
	g_demoRecording = false;
	g_knifeWinner = 0;
	g_overtimeCount = 0;
}

public Action Command_Create(int client, int args)
{
	char arg[128];
	
	if(args == 1)
	{
		GetCmdArg(1, arg, sizeof(arg));
		if(strcmp(arg, "create", false) == 0)
		{
			if(g_match_status != MATCH_STATUS_NONE)
				return Plugin_Handled;
			char tmp[128];
			
			ConVar cv_teamName1 = FindConVar("mp_teamname_1");
			ConVar cv_teamName2 = FindConVar("mp_teamname_2");
			
			
			g_match_status = MATCH_STATUS_WARMUP;
			PrintToConsole(client, "Demo: %d", g_cvDemo.IntValue);
			PrintToConsole(client, "Knife Round: %d", g_cvKnifeRound.IntValue);
			PrintToConsole(client, "Clinch: %d", g_cvClinch.IntValue);
			g_cvPass.GetString(tmp, sizeof(tmp));
			PrintToConsole(client, "Password: %s", tmp);
			g_cvConfig.GetString(tmp, sizeof(tmp));
			PrintToConsole(client, "Config: %s", tmp);
			g_cvTeam1.GetString(tmp, sizeof(tmp));
			cv_teamName1.SetString(tmp);
			PrintToConsole(client, "Team Name 1: %s", tmp);
			g_cvTeam2.GetString(tmp, sizeof(tmp));
			cv_teamName2.SetString(tmp);
			PrintToConsole(client, "Team name 2: %s", tmp);
			g_cvPass.GetString(tmp, sizeof(tmp));
			ServerCommand("sv_password %s", tmp);
			PrintToConsole(client, "connect 137.74.4.67:27085;password %s", tmp);
		}
		
		if(strcmp(arg, "help", false) == 0)
		{
			char tmp[128];
			PrintToConsole(client, "---------------HELP------------");
			PrintToConsole(client, "zbot create - create match");
			PrintToConsole(client, "zbot forceready - force ready");
			PrintToConsole(client, "zbot forceunpause - force unpause");
			PrintToConsole(client, "zbot update - update informations!");
			PrintToConsole(client, "zbot delete - delete match");
			PrintToConsole(client, "---------------CVARS-----------");
			PrintToConsole(client, "zbot_demo (1) %d", g_cvDemo.IntValue);
			PrintToConsole(client, "zbot_knife (1) %d", g_cvKnifeRound.IntValue);
			g_cvPass.GetString(tmp, sizeof(tmp));
			PrintToConsole(client, "zbot_pass (pcw) %s", tmp);
			g_cvConfig.GetString(tmp, sizeof(tmp));
			PrintToConsole(client, "zbot_config (esl5on5.cfg) %s", tmp);
			g_cvTeam1.GetString(tmp, sizeof(tmp));
			PrintToConsole(client, "zbot_team1 (Team1) %s", tmp);
			g_cvTeam2.GetString(tmp, sizeof(tmp));
			PrintToConsole(client, "zbot_team2 (Team2) %s", tmp);
		}
		
		if(strcmp(arg, "forceready", false) == 0)
		{
			PrintToChatAll("%sReady status has been forced!", prefix);
			g_ctReady = true;
			g_tReady = true;
		}
		
		if(strcmp(arg, "forceunpause", false) == 0)
		{
			PrintToChatAll("%sUnpause has been forced!", prefix);
			g_ctUnpaused = true;
			g_tUnpaused = true;
			ServerCommand("mp_unpause_match");
		}
		
		if(strcmp(arg, "update", false) == 0)
		{
			char tmp[128];
			ConVar cv_teamName1 = FindConVar("mp_teamname_1");
			ConVar cv_teamName2 = FindConVar("mp_teamname_2");
			
			g_cvTeam1.GetString(tmp, sizeof(tmp));
			cv_teamName1.SetString(tmp);
			g_cvTeam2.GetString(tmp, sizeof(tmp));
			cv_teamName2.SetString(tmp);
			g_cvPass.GetString(tmp, sizeof(tmp));
			ServerCommand("sv_password %s", tmp);
		}
		
		if(strcmp(arg, "delete", false) == 0 || strcmp(arg, "cancel", false) == 0)
		{
			if(g_match_status == MATCH_STATUS_NONE)
				return Plugin_Handled;
			StopDemo();
			g_match_status = MATCH_STATUS_NONE;
			g_ctUnpaused = false;
			g_tUnpaused = false;
			g_ctReady = false;
			g_tReady = false;
			g_nextRound = false;
			g_demoRecording = false;
			g_knifeWinner = 0;
			ServerCommand("exec warmup");
			PrintToChatAll("%sMatch has been canceled!", prefix);
		}
	}
	
	return Plugin_Handled;
}

public Action OnClientSayCommand(int client, const char[] command, const char[] sArgs)
{
	if(g_match_status == MATCH_STATUS_NONE)
		return Plugin_Continue;
	
	if(StrContains(sArgs, "!", false) != -1 || StrContains(sArgs, ".", false) != -1)
	{
		char text[128];
		strcopy(text, 128, sArgs);
		ReplaceString(text, sizeof(text), "!", "", false);
		ReplaceString(text, sizeof(text), ".", "", false);
		
		if(strcmp(text, "unready", false) == 0)
		{
			Command_UnReady(client);
			return Plugin_Continue;
		}
		else if(strcmp(text, "ready", false) == 0 || strcmp(text, "gaben", false) == 0 || strcmp(text, "zakrzu", false) == 0)
		{
			Command_Ready(client);
			return Plugin_Continue;
		}
		
		if(strcmp(text, "unpause", false) == 0)
		{
			Command_UnPause(client);
			return Plugin_Continue;
		}
		else if(strcmp(text, "pause", false) == 0)
		{
			Command_Pause(client);
			return Plugin_Continue;
		}
		
		if(strcmp(text, "switch", false) == 0)
		{
			Command_Switch(client);
			return Plugin_Continue;
		}
		
		if(strcmp(text, "stay", false) == 0)
		{
			Command_Stay(client);
			return Plugin_Continue;
		}
		
	}
	return Plugin_Continue;
}

public void Command_Switch(int client)
{
	if(g_match_status != MATCH_STATUS_AFTER_KNIFE)
		return;
	int team = GetClientTeam(client);
	if(team == g_knifeWinner)
	{
		g_knifeWinner = 0;
		ServerCommand("mp_swapteams");
		PrintToChatAll("%sTeams has been switched!", prefix);
		StartMatch();
		return;
	}
}

public void Command_Stay(int client)
{
	if(g_match_status != MATCH_STATUS_AFTER_KNIFE)
		return;
	int team = GetClientTeam(client);
	if(team == g_knifeWinner)
	{
		g_knifeWinner = 0;
		PrintToChatAll("%sTeams stay!", prefix);
		StartMatch();
		return;
	}
}

public void Command_Ready(int client)
{
	if(g_match_status != MATCH_STATUS_WARMUP)
		return;
	int team = GetClientTeam(client);
	if(IsReady(team))
		return;
	
	if(team == CS_TEAM_T)
		g_tReady = true;
	else if(team == CS_TEAM_CT) 
		g_ctReady = true;
	if(g_tReady && g_ctReady)
	{
		PrintToChatAll("%sBoth teams are \x04ready\x01!", prefix);
	}
	else if(g_tReady && !g_ctReady)
	{
		PrintToChatAll("%sThe T team is \x04ready\x01. Waiting for the CT team to type \x05!ready", prefix);
	}
	else if(!g_tReady && g_ctReady)
	{
		PrintToChatAll("%sThe CT team is \x04ready\x01. Waiting for the T team to type \x05!ready", prefix);
	}
}

public void Command_UnReady(int client)
{
	if(g_match_status != MATCH_STATUS_WARMUP)
		return;
	int team = GetClientTeam(client);
	if(!IsReady(team))
		return;
	
	if(team == CS_TEAM_T)
		g_tReady = false;
	else if(team == CS_TEAM_CT) 
		g_ctReady = false;
	if(!g_tReady && !g_ctReady)
	{
		PrintToChatAll("%sBoth teams are \x0Fnot ready\x01!", prefix);
	}
	else if(!g_tReady)
	{
		PrintToChatAll("%sThe T team is \x0Fnot ready\x01. Waiting for the T team to type \x05!ready", prefix);
	}
	else if(!g_ctReady)
	{
		PrintToChatAll("%sThe CT team is \x0Fnot ready\x01. Waiting for the CT team to type \x05!ready", prefix);
	}
}

public void Command_Pause(int client)
{
	if(IsPaused())
		return;
	
	g_ctUnpaused = false;
	g_tUnpaused = false;
	ServerCommand("mp_pause_match");
	PrintToChatAll("%sMatch has been paused!", prefix);
}

public void Command_UnPause(int client)
{
	if(!IsPaused())
		return;
	
	int team = GetClientTeam(client);
	
	if(team == CS_TEAM_T)
		g_tUnpaused = true;
	else if(team == CS_TEAM_CT)
		g_ctUnpaused = true;
	if(g_tUnpaused && g_ctUnpaused)
	{
		ServerCommand("mp_unpause_match");
		PrintToChatAll("%sMatch pause has been canceled", prefix);
		g_tUnpaused = false;
		g_ctUnpaused = false;
	}
	else if(g_tUnpaused && !g_ctUnpaused)
	{
		PrintToChatAll("%sThe T team wants to unpause. Waiting for the CT team to type \x05!unpause", prefix);
	}
	else if(!g_tUnpaused && g_ctUnpaused)
	{
		PrintToChatAll("%sThe CT team wants to unpause. Waiting for the T team to type \x05!unpause", prefix);
	}
}

public void StartKnife()
{
	g_ctReady = false;
	g_tReady = false;
	bool knife = g_cvKnifeRound.BoolValue;
	if(knife)
	{
		g_match_status = MATCH_STATUS_KNIFE;
		ConVar cvHalf = FindConVar("mp_halftime_duration");
		cvHalf.SetInt(1);
		
		ConVar cvRoundT = FindConVar("mp_roundtime");
		cvRoundT.SetInt(60);
		
		ConVar cvRoundTD = FindConVar("mp_roundtime_defuse");
		cvRoundTD.SetInt(60);
		
		ConVar cvRoundTH = FindConVar("mp_roundtime_hostage");
		cvRoundTH.SetInt(60);
		
		ConVar cvCTDS = FindConVar("mp_ct_default_secondary");
		cvCTDS.SetString("");
		
		ConVar cvTDS = FindConVar("mp_t_default_secondary");
		cvTDS.SetString("");
		
		ConVar cvArmor = FindConVar("mp_free_armor");
		cvArmor.SetInt(1);
		
		ConVar cvC4 = FindConVar("mp_give_player_c4");
		cvC4.SetInt(0);
		
		ConVar cvMaxMoney = FindConVar("mp_maxmoney");
		cvMaxMoney.SetInt(0);
		
		ConVar cvFreez = FindConVar("mp_freezetime");
		cvFreez.SetInt(5);
		
		ConVar cvFriendly = FindConVar("mp_friendlyfire");
		cvFriendly.SetInt(1);
		
		ServerCommand("mp_warmup_end");
		PrintToChatAll("%s\x06---MATCH IS LIVE!---", prefix);
		PrintToChatAll("%sKNIFE ROUND STARTED!", prefix);
		PrintToChatAll("%sKNIFE ROUND STARTED!", prefix);
		PrintToChatAll("%sKNIFE ROUND STARTED!", prefix);
		PrintToChatAll("%sKNIFE ROUND STARTED!", prefix);
		PrintToChatAll("%s\x06---MATCH IS LIVE!---", prefix);
		
		return;
	}
	else 
	{
		StartMatch();
		return;
	}
}

public void StartDemo()
{
	if(g_demoRecording)
		return;
	g_demoRecording = true;
	char demoname[255];
	char teamname1[255];
	char teamname2[255];
	char strtime[255];
	g_cvTeam1.GetString(teamname1, sizeof(teamname1));
	g_cvTeam2.GetString(teamname2, sizeof(teamname2));
	int time = GetTime();
	
	IntToString(time, strtime, sizeof(strtime));
	
	StrCat(demoname, sizeof(demoname), strtime);
	StrCat(demoname, sizeof(demoname), "-");
	StrCat(demoname, sizeof(demoname), teamname1);
	StrCat(demoname, sizeof(demoname), "-");
	StrCat(demoname, sizeof(demoname), teamname2);
	ServerCommand("tv_record %s", demoname);
}

public void StopDemo()
{
	if(!g_demoRecording)
		return;
	g_demoRecording	= false;
	ServerCommand("tv_stoprecord");
}

public void StartMatch()
{
	g_match_status = MATCH_STATUS_MATCH1;
	
	if(g_cvDemo.BoolValue)
	{
		StartDemo();
	}
	
	char cfg[255];
	g_cvConfig.GetString(cfg, sizeof(cfg));
	ServerCommand("exec %s", cfg);
	g_nextRound = true;
}

public void Countdown()
{
	static int timer;
	if(g_match_status != MATCH_STATUS_WARMUP)
		return;
	if(g_ctReady && g_tReady)
	{
		if(timer <= 0)
		{
			StartKnife();
			return;
		}
		PrintToChatAll("%s %d sec left to start the match!", prefix, timer);
		timer--;
		return;
	} 
	else 
	{
		timer = COUNTDOWN_TIMER;
		return;
	}
}

public void OnGameFrame()
{
	static float frames = 0.0;
	static int seconds = 0;
	if(g_server_tickrate <= frames)
	{
		frames = 0.0;
		seconds++;
		Countdown();
		if(g_match_status == MATCH_STATUS_WARMUP && seconds >= 20)
		{
			seconds = 0;
			if(!g_ctReady && g_tReady)
			{
				PrintToChatAll("%s\x0CCT\x01 is \x0Fnot ready\x01! | \x09T\x01 is \x05ready\x01!", prefix);
			}
			else if(g_ctReady && !g_tReady)
			{
				PrintToChatAll("%s\x0CCT\x01 is \x05ready\x01! | \x09T\x01 is \x0Fnot ready!\x01", prefix);
			} 
			else if(!g_ctReady && !g_tReady)
			{
				PrintToChatAll("%s\x0CCT\x01 is \x0Fnot ready\x01! | \x09T\x01 is \x0Fnot ready\x01!", prefix);
			}
		}
		if(g_match_status == MATCH_STATUS_AFTER_KNIFE && seconds >= 20)
		{
			seconds = 0;
			if(g_knifeWinner == CS_TEAM_T)
			{
				PrintToChatAll("%sTeam \x09T\x01 won knife round, and can choose side to start.", prefix);
				PrintToChatAll("%sYou can \x05!switch\x01 side or \x05!stay\x01", prefix);
			}
			else if(g_knifeWinner == CS_TEAM_CT)
			{
				PrintToChatAll("%sTeam \x0CCT\x01 won knife round, and can choose side to start.", prefix);
				PrintToChatAll("%sYou can \x05!switch\x01 side or \x05!stay\x01", prefix);
			}
		}
	}
	frames++;
}

public bool IsReady(int team)
{
	if(team == CS_TEAM_T)
		return g_tReady;
	else if(team == CS_TEAM_CT) 
		return g_ctReady;
	return false;
}

public bool IsPaused()
{
	return bool:GameRules_GetProp("m_bMatchWaitingForResume");
}