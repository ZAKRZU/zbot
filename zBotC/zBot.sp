/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <cstrike>

//Team define
#define TCT 3
#define TT 2
//State define
#define StateWarmup 0
#define StateKnifeStart 1
#define StateKnifeEnd 2
#define StatePause 3

//Variables
bool RTeam1, RTeam2;
/*CT=3 TT=2 DISABLE=-1*/
int knife_winner;

//Game settings
char s_TeamName1[256], s_TeamName2[256];
bool s_knife_round;

/*
* state
* 0-waiting for players
* 1-knife round
* 2-first 
* 3-pause
* */
int state;

//ConVars
ConVar g_teamname_1;
ConVar g_teamname_2;

float frames;

float TickRate;

public Plugin:myinfo = 
{
	name = "zBot",
	author = "ZAKRZU",
	description = "<- Description ->",
	version = "1.0",
	url = "<- URL ->"
}

public OnPluginStart()
{
	// Add your own code here...
	TickRate = 1.0/GetTickInterval();
	knife_winner = -1;
	
	g_teamname_1 = FindConVar("mp_teamname_1");
	g_teamname_2 = FindConVar("mp_teamname_2");
	
	RTeam1 = false;
	RTeam2 = false;
	RegConsoleCmd("zbot_test", Command_zBot_Test);
	RegConsoleCmd("ready", Command_zBot_Ready);
	RegConsoleCmd("unready", Command_zBot_UnReady);
	RegConsoleCmd("switch", Command_zBot_Switch);
	RegConsoleCmd("stay", Command_zBot_Stay);
	RegConsoleCmd("zbot_setTN", Command_zBot_SetTeamNames);
	
	state = 0;
}

public Action Command_zBot_Test(int client, int args)
{
	char arg[128];
	char full[256];
	
	GetCmdArgString(full, sizeof(full));
	
	ServerCommand("exec esl5on5.cfg");
	
	return Plugin_Handled;
}

//1
public Action Command_zBot_SetTeamNames(int client, int args)
{
	char arg[256];
	char full[256];
	
	GetCmdArgString(full, sizeof(full));
	
	if(args < 2)
	{
		return Plugin_Handled;
	}
	
		GetCmdArg(1, arg, sizeof(arg));
		s_TeamName1 = arg;
		GetCmdArg(2, arg, sizeof(arg));
		s_TeamName2 = arg;
	
	g_teamname_1.SetString(s_TeamName1);
	g_teamname_2.SetString(s_TeamName2);
	return Plugin_Handled;
}

public Action Command_zBot_Ready(int client, int args)
{
	char arg[128];
	char full[256];
	
	GetCmdArgString(full, sizeof(full));
	
	if(client)
	{
		if(state != 0)
		{
			return Plugin_Handled;
		}
		if(GetClientTeam(client) == TCT)
		{
			if(RTeam1 == false)
			{
				RTeam1 = true;
				PrintToChat(client, "Team CT is ready");
			}
		} else {
			if(RTeam2 == false)
			{
				RTeam2 = true;
				PrintToChat(client, "Team T is ready");
			}
		}
	} else {
		PrintToConsole(client, "Server");
	}
	
	return Plugin_Handled;
}

public Action Command_zBot_UnReady(int client, int args)
{
	char arg[128];
	char full[256];
	
	GetCmdArgString(full, sizeof(full));
	
	if(client)
	{
		if(state != 0)
		{
			return Plugin_Handled;
		}
		
		if(GetClientTeam(client) == TCT)
		{
			if(RTeam1 == true)
			{
				RTeam1 = false;
				PrintToChat(client, "Team CT is not ready");
			}
		} else {
			if(RTeam1 == true)
			{
				RTeam2 = false;
				PrintToChat(client, "Team T is not ready");
			}
		}
	} else {
		PrintToConsole(client, "Server");
	}
	
	return Plugin_Handled;
}

public Action Command_zBot_Switch(int client, int args)
{
	char arg[128];
	char full[256];
	
	GetCmdArgString(full, sizeof(full));
	
	if(client)
	{
		if(GetClientTeam(client) == knife_winner)
		{
			PrintToConsole(client, "Switch");
			ServerCommand("mp_swapteams");
			knife_winner = -1;
			//StartMatch();
		}
	} else {
		PrintToConsole(client, "Server");
	}
	
	return Plugin_Handled;
}

public Action Command_zBot_Stay(int client, int args)
{
	char arg[128];
	char full[256];
	
	GetCmdArgString(full, sizeof(full));
	
	if(client)
	{
		if(GetClientTeam(client) == knife_winner)
		{
			PrintToConsole(client, "Stay");
			knife_winner = -1;
			//StartMatch();
		}
	} else {
		PrintToConsole(client, "Server");
	}
	
	return Plugin_Handled;
}

int secondsCounter = 10;
public void OnGameFrame()
{
	if(TickRate <= frames)
	{
		frames = 0;
		if(RTeam1 && RTeam2)
		{
			if(secondsCounter != 0)
			{
				CountDown(secondsCounter);
				secondsCounter--;
			} else {
				StartMatch();
			}
		} else {
			secondsCounter = 10;
		}
	}
	frames++;
}

public void CountDown(int seconds)
{
	if(RTeam1 && RTeam2)
	{
		PrintToChatAll("Match%d");
	} else {
		PrintToChatAll("Countdown has been aborted!");
	}
}

public Action CS_OnTerminateRound(float &delay, CSRoundEndReason &reason)
{
	int teamWon = 0;
	
		if(reason == CSRoundEnd_CTWin)
	{
		teamWon = TCT;
		PrintToChatAll("CT WIN");
	}
	
	if(reason == CSRoundEnd_TerroristWin)
	{
		teamWon = TT;
		PrintToChatAll("T WIN");
	}
	
	if(state == StateKnifeStart)
	{
		knife_winner = teamWon;
		state = StateKnifeEnd;
		undoKnifeConfig();
		executeWarmupConfig();
	}
	
	return Plugin_Continue;
}

public void executeKnifeConfig()
{
	PrintToChatAll("Executing knife config");
	ServerCommand("mp_halftime_duration 1; mp_roundtime 60; mp_roundtime_defuse 60; mp_roundtime_hostage 60; mp_ct_default_secondary ''; mp_t_default_secondary ''; mp_free_armor 1; mp_give_player_c4 0; mp_maxmoney 0");
}

public void undoKnifeConfig()
{
	ServerCommand("mp_halftime_duration 15; mp_roundtime 5; mp_roundtime_defuse 0; mp_roundtime_hostage 0; mp_ct_default_secondary \"weapon_hkp2000\"; mp_t_default_secondary \"weapon_glock\"; mp_free_armor 0; mp_give_player_c4 1; mp_maxmoney 16000");
}

public void executeWarmupConfig()
{
	ServerCommand("mp_warmuptime 3600; mp_warmup_pausetimer 1; mp_maxmoney 60000; mp_startmoney 60000; mp_free_armor 1; mp_warmup_start");
}

public void undoWarmupConfig()
{
	ServerCommand("mp_warmuptime 30; mp_warmup_pausetimer 0; mp_maxmoney 16000; mp_startmoney 800; mp_free_armor 0; mp_warmup_end");
}

public void executeMatchConfig()
{
	ServerCommand("exec esl5on5.cfg; mp_warmuptime 0; mp_halftime_pausetimer 1; mp_maxrounds 30");
}

public bool goLive()
{
	if(RTeam1 == true && RTeam2 == true)
	{
		RTeam1 = false;
		RTeam2 = false;
		return true;
	}
	return false;
}

public void StartMatch()
{
	/*START KNIFE ROUND*/
	if(state == StateWarmup)
	{
		state = StateKnifeStart;
		executeKnifeConfig();
	}
	
	
}