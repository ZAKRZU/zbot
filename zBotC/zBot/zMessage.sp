/* Plugin Template generated by Pawn Studio */

#define MESSAGETIME 15
#define COUNTDOWNTIME 10

const char pname[] = "zBot:";

CountType g_countdown = non;
static countdown = COUNTDOWNTIME;

public enum MessType
{
	MReady, MSwap, MStay, MHalf, MPause, MUnPause, MCCreateHelp, MScore, MWarnNP, MTReady, MTUnReady
}

public enum CountType
{
	start, zero, non
}

public void Update()
{
	static int updates = 0;
	bool continue_update = false;
	updates++;
	if(updates % MESSAGETIME == 0 && !(g_countdown == start))
	{
		if(g_gameState = GSTATE_WARMUP)
		{
			MessageTypeReady();
			continue_update = true;
		}
		if(g_gameState = GSTATE_W_SIDECHANGEWAIT)
		{
			MessageSwap();
			continue_update = true;
		}
		if(g_gameState = GSTATE_MATCH_HALFBREAK)
		{
			MessageHalfReady();	
			continue_update = true;
		}
		if(g_isPaused)
		{
			MessageMatchPause();
			continue_update = true;
		}
	}
	
	if(g_countdown == zero)
	{
		MessageResetCount();
	}
	
	if(g_countdown == start)
	{
		MessageCountdown(countdown);
		countdown--;
		if(countdown == 0)
		{
			g_countdown = zero;
		}
	}
	
	if(!continue_update)
	{
		updates = 0;
	}
}

public void MessageStartCount()
{
	g_countdown = start;
}

public void MessageResetCount()
{
	g_countdown = non;
	countdown = COUNTDOWNTIME;
}

public bool MessageCounteDown()
{
	if(g_countdown == zero)
		return true;
	return false;
}

public bool MessageSend(MessType type, int client)
{
	switch(type)
	{
		case MScore:
		{
			if(g_gameState == GSTATE_MATCH_1ST)
			{
				MessageScoreFST();
				return true;
			} else if(g_gameState == GSTATE_MATCH_2ND)
			{
				MessageScoreSND();
				return true;
			}
		}
		case MCCreateHelp:
		{
			MessageHelpCreate(client);
		}
		case MWarnNP:
		{
			MessageWarnNotAPlayer(client);
		}
		case MSwap:
		{
			MessageBroadcastSWAP();
		}
		case MStay:
		{
			MessageBroadcastSTAY();
		}
		case MPause:
		{
			MessageBroadcastTeamPause(client);
		}
		case MUnPause:
		{
			MessageBroadcastTeamUPause(client);
		}
		case MTReady:
		{
			MessageBroadcastTeamReady(client);
		}
		case MTUnReady:
		{
			MessageBroadcastTeamUReady(client);
		}
	}
	return false;
}

public void MessageCountdown(int count)
{
	PrintToChatAll("%s %d seconds left.", pname);
}

public void MessageScoreFST()
{
	PrintToChatAll("%s %s [%d] / %s [%d]", pname, TeamGetName(TEAM_CT), TeamGetScore(TEAM_CT), TeamGetName(TEAM_TT), TeamGetScore(TEAM_TT));
}

public void MessageScoreSND()
{
	PrintToChatAll("%s %s [%d] / %s [%d]", pname, TeamGetName(TEAM_CT), TeamGetScore(TEAM_TT), TeamGetName(TEAM_TT), TeamGetScore(TEAM_CT));
}

public void MessageTypeReady()
{
	//PrintToChatAll("zBot: %s [%s] is [%s] | %s [%s] is [%s]", TeamGetName(TEAM_CT), TeamGetSide(TEAM_CT), TeamIsReadyString(TEAM_CT), TeamGetName(TEAM_TT), TeamGetSide(TEAM_TT), TeamIsReadyString(TEAM_TT));
	PrintToChatAll("%s %s is [%s] | %s is [%s]", pname, TeamGetName(TEAM_CT), TeamIsReadyString(TEAM_CT), TeamGetName(TEAM_TT), TeamIsReadyString(TEAM_TT));
	PrintToChatAll("%s Please type !ready if your team is ready!", pname);
	MessageCommands();
}

public void MessageSwap()
{
	PrintToChatAll("%s Waiting for %s to choose side (!stay/!swtich)", pname, TeamGetName(g_knife_winner));
	MessageCommands();
}

public void MessageHalfReady()
{
	PrintToChatAll("%s HalfTime Team: %s [%d] | Team: %s [%d]", pname, TeamGetName(TEAM_CT), TeamGetScore(TEAM_CT), TeamGetName(TEAM_TT), TeamGetScore(TEAM_TT));
	PrintToChatAll("%s Please type !ready if your team is ready!", pname);
	MessageCommands();
}

public void MessageMatchPause()
{
	PrintToChatAll("%s Match is paused!", pname);
	PrintToChatAll("%s Please type !unpause if your team is ready!", pname);
	MessageCommands();
}

public void MessageHelpCreate(int client)
{
	PrintToConsole(client, "zbot_create TeamName1 TeamName2 Config Password");
	PrintToConsole(client, "TeamName1 - Set name of team 1.");
	PrintToConsole(client, "TeamName2 - Set name of team 2.");
	PrintToConsole(client, "Config - Set config (with .cfg). Ex.(esl5on5.cfg)");
	PrintToConsole(client, "Password - Set server password (optional)");
	//PrintToConsole(client, "MapName - Set map.(U can ignore, type something)");
	//PrintToConsole(client, "KnifeRound - Set that you want knife round, or not.(type true if you want or false if not)");
	//PrintToConsole(client, "AutoTeamAssigment - Reserved. Type something");
}

public void MessageCommands()
{
	PrintToChatAll("%s Commands available: !ready, !notready, !stay, !switch", pname);
	//PrintToChatAll("zBot:  Commands available: !help, !status, !stats, !morestats, !score, !ready, !notready, !stop, !restart (for knife round), !stay, !switch");
}

public void MessageWarnNotAPlayer(int client)
{
	PrintToConsole(client, "%s You must be a player!", pname);
}

public void MessageBroadcastSWAP()
{
	PrintToChatAll("%s TEAM SWAP!!", pname);
}

public void MessageBroadcastSTAY()
{
	PrintToChatAll("%s TEAM STAY!!", pname);
}


public void MessageBroadcastTeamPause(int tmp_team)
{
	PrintToChatAll("%s Team %s get a pause.", pname, TeamGetName(tmp_team));
}

public void MessageBroadcastTeamUPause(int tmp_team)
{
	PrintToChatAll("%s Team %s requested a unpause.", pname, TeamGetName(tmp_team));
}

public void MessageBroadcastTeamReady(int teamIndex)
{
	PrintToChatAll("%s Team %s[%s] is ready!", pname, TeamGetName(teamIndex), TeamGetSide(teamIndex));
}

public void MessageBroadcastTeamReady(int teamIndex)
{
	PrintToChatAll("%s Team %s[%s] is not ready!", pname, TeamGetName(teamIndex), TeamGetSide(teamIndex));
}